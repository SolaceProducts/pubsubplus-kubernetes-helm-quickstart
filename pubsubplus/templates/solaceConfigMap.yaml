apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "solace.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "solace.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
data:
  init.sh: |-
    # export username_admin_passwordfilepath=/mnt/disks/secrets/username_admin_password
      export username_admin_password=`cat /mnt/disks/secrets/username_admin_password`
      export username_admin_globalaccesslevel=admin
      export service_ssh_port='2222'
      export service_webtransport_port='8008'
      export service_webtransport_tlsport='1443'
      export service_semp_tlsport='1943'
      export logging_debug_output=all
{{- if eq .Values.solace.size "dev" }}
      export system_scaling_maxconnectioncount="100"
{{- else if eq .Values.solace.size "prod100" }}
      export system_scaling_maxconnectioncount="100"
{{- else if eq .Values.solace.size "prod1k" }}
      export system_scaling_maxconnectioncount="1000"
{{- else if eq .Values.solace.size "prod10k" }}
      export system_scaling_maxconnectioncount="10000"
{{- else if eq .Values.solace.size "prod100k" }}
      export system_scaling_maxconnectioncount="100000"
{{- else if eq .Values.solace.size "prod200k" }}
      export system_scaling_maxconnectioncount="200000"
{{- end }}
{{- if .Values.solace.redundancy }}
      # [TODO] KBARR not using correct method of finding ordinal until we bump min Kubernetes release above 1.8.1
      # https://github.com/kubernetes/kubernetes/issues/40651
      # node_ordinal=$(STATEFULSET_ORDINAL)
      IFS='-' read -ra host_array <<< $(hostname)
      node_ordinal=${host_array[-1]}
      if [[ ! -z `echo $STATEFULSET_NAMESPACE` ]]; then
        namespace=`echo $STATEFULSET_NAMESPACE`
      else
        namespace=default
      fi
      service={{ template "solace.fullname" . }}
      # Deal with the fact we cannot accept "-" in routre names
      service_name=$(echo ${service} | sed 's/-//g')
      export routername=$(echo $(hostname) | sed 's/-//g')
      export redundancy_enable=yes
      export configsync_enable=yes
      export redundancy_authentication_presharedkey_key=`cat /mnt/disks/secrets/username_admin_password | awk '{x=$0;for(i=length;i<51;i++)x=x "0";}END{print x}' | base64` # Right-pad with 0s to 50 length
      export redundancy_group_node_${service_name}0_nodetype=message_routing
      export redundancy_group_node_${service_name}0_connectvia=${service}-0.${service}-discovery.${namespace}.svc
      export redundancy_group_node_${service_name}1_nodetype=message_routing
      export redundancy_group_node_${service_name}1_connectvia=${service}-1.${service}-discovery.${namespace}.svc
      export redundancy_group_node_${service_name}2_nodetype=monitoring
      export redundancy_group_node_${service_name}2_connectvia=${service}-2.${service}-discovery.${namespace}.svc

      case ${node_ordinal} in
      0)
       export nodetype=message_routing
       export redundancy_matelink_connectvia=${service}-1.${service}-discovery.${namespace}.svc
       export redundancy_activestandbyrole=primary
        ;;
      1)
       export nodetype=message_routing
       export redundancy_matelink_connectvia=${service}-0.${service}-discovery.${namespace}.svc
       export redundancy_activestandbyrole=backup
        ;;
      2)
       export nodetype=monitoring
       ;;
      esac
{{- end }}

  config-sync-check.sh: |-
      #!/bin/bash
{{- if .Values.solace.redundancy }}
      APP=`basename "$0"`
      # [TODO] KBARR not using correct method of finding ordinal until we bump min Kubernetes release above 1.8.1
      # https://github.com/kubernetes/kubernetes/issues/40651
      # node_ordinal=$(STATEFULSET_ORDINAL)
      IFS='-' read -ra host_array <<< $(hostname)
      node_ordinal=${host_array[-1]}
      echo "`date` INFO: ${APP}-node ordinal: ${node_ordinal}"
      password=`cat /mnt/disks/secrets/username_admin_password`
      loop_guard=60
      pause=10
      count=0
      resync_step=""
      role=""
      #exclude monitor node from config-sync check
      if [ "${node_ordinal}" != "2" ]; then
        while [ ${count} -lt ${loop_guard} ]; do 
          role_results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
                -q "<rpc><show><redundancy><detail/></redundancy></show></rpc>" \
                -v "/rpc-reply/rpc/show/redundancy/active-standby-role[text()]"`
          run_time=$((${count} * ${pause}))
          case "`echo ${role_results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`" in
            "Primary")
            role="primary"
            break
            ;;
            "Backup")
            role="backup"
            break
            ;;
          esac
          ((count++))
          echo "`date` INFO: ${APP}-Waited ${run_time} seconds, Management API not yet accessible"
          sleep ${pause}
        done
        if [ ${count} -eq ${loop_guard} ]; then
          echo "`date` ERROR: ${APP}-Solace Management API never came up"  >&2
          exit 1 
        fi
        # Determine local activity
        count=0
        echo "`date` INFO: ${APP}-Management API is up, determined that this node's active-standby role is: ${role}"
        while [ ${count} -lt ${loop_guard} ]; do 
          online_results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
              -q "<rpc><show><redundancy><detail/></redundancy></show></rpc>" \
              -v "/rpc-reply/rpc/show/redundancy/virtual-routers/${role}/status/activity[text()]"`
          local_activity=`echo ${online_results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
          run_time=$((${count} * ${pause}))
          case "${local_activity}" in
            "Local Active")
              echo "`date` INFO: ${APP}-Node activity status is Local Active, after ${run_time} seconds"
              # We should only be here on new cluster create, if not likely a bug
              # Need to issue assert master to get back into sync"
              resync_step="assert-master"
              break
              ;;
            "Mate Active")
              echo "`date` INFO: ${APP}-Node activity status is Mate Active, after ${run_time} seconds"
              # This is normal state if we are backup or recreated later on
              # will issue a resync master to get back into sync
              resync_step="resync-master"
              break
              ;;
          esac
          ((count++))
          echo "`date` INFO: ${APP}-Waited ${run_time} seconds, Local activity state is: ${local_activity}"
          sleep ${pause}
        done
        if [ ${count} -eq ${loop_guard} ]; then
          echo "`date` ERROR: ${APP}-Local activity state never become Local Active or Mate Active"  >&2
          exit 1 
        fi
        # If we need to assert master, then we need to wait for mate to reconcile
        if [ "${resync_step}" = "assert-master" ]; then
          count=0
          echo "`date` INFO: ${APP}-Waiting for mate activity state to be 'Standby'"
          while [ ${count} -lt ${loop_guard} ]; do 
            online_results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
                -q "<rpc><show><redundancy><detail/></redundancy></show></rpc>" \
                -v "/rpc-reply/rpc/show/redundancy/virtual-routers/${role}/status/detail/priority-reported-by-mate/summary[text()]"`
            mate_activity=`echo ${online_results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
            run_time=$((${count} * ${pause}))
            case "${mate_activity}" in
              "Standby")
                echo "`date` INFO: ${APP}-Activity state reported by mate is Standby, after ${run_time} seconds"
                break
                ;;
            esac
            ((count++))
            echo "`date` INFO: ${APP}-Waited ${run_time} seconds, Mate activity state is: ${mate_activity}, not yet in sync"
            sleep ${pause}
          done
          if [ ${count} -eq ${loop_guard} ]; then
            echo "`date` ERROR: ${APP}-Mate not in sync, never reached Standby" >&2
            exit 1 
          fi
        fi # if assert-master
        # Ensure Config-sync connection state is Connected before proceeding
        count=0
        echo "`date` INFO: ${APP}-Waiting for config-sync connected"
        while [ ${count} -lt ${loop_guard} ]; do
          online_results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
              -q "<rpc><show><config-sync></config-sync></show></rpc>" \
              -v "/rpc-reply/rpc/show/config-sync/status/client/connection-state"`
          connection_state=`echo ${online_results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
          run_time=$((${count} * ${pause}))
          case "${connection_state}" in
            "Connected")
              echo "`date` INFO: ${APP}-Config-sync connection state is Connected, after ${run_time} seconds"
              break
              ;;
          esac
          ((count++))
          echo "`date` INFO: ${APP}-Waited ${run_time} seconds, Config-sync connection state is: ${connection_state}, not yet in Connected"
          sleep ${pause}
        done
        if [ ${count} -eq ${loop_guard} ]; then
          echo "`date` ERROR: ${APP}-Config-sync connection state never reached Connected" >&2
          exit 1
        fi
        # Now can issue {resync_step} command
        echo "`date` INFO: ${APP}-Initiating ${resync_step}"
        /mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
              -q "<rpc><admin><config-sync><${resync_step}><router/></${resync_step}></config-sync></admin></rpc>"
        /mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
              -q "<rpc><admin><config-sync><${resync_step}><vpn-name>default</vpn-name></${resync_step}></config-sync></admin></rpc>"
        # Wait for config-sync results
        count=0
        echo "`date` INFO: ${APP}-Waiting for config-sync connected"
        while [ ${count} -lt ${loop_guard} ]; do
          online_results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
                  -q "<rpc><show><config-sync></config-sync></show></rpc>" \
                  -v "/rpc-reply/rpc/show/config-sync/status/oper-status"`
          confsyncstatus_results=`echo ${online_results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
          run_time=$((${count} * ${pause}))
          case "${confsyncstatus_results}" in
            "Up")
              echo "`date` INFO: ${APP}-Config-sync is Up, after ${run_time} seconds"
              break
              ;;
          esac
          ((count++))
          echo "`date` INFO: ${APP}-Waited ${run_time} seconds, Config-sync is: ${confsyncstatus_results}, not yet Up"
          sleep ${pause}
        done
        if [ ${count} -eq ${loop_guard} ]; then
          echo "`date` ERROR: ${APP}-Config-sync never reached state \"Up\"" >&2
          exit 1
        fi
      fi # if not monitor
      echo "`date` INFO: ${APP}-Solace message broker bringup is complete for this node."
{{- end }}
      exit 0


  readiness_check.sh: |-
    #!/bin/bash

    # Function to set Kubernetes metadata labels
    set_label () {
      #Prevent overdriving Kubernetes infra, don't set activity state to same as previous state
      previous_state=`cat $3`
      if [ "${2}" = "${previous_state}" ]; then
        #echo "`date` INFO: ${APP}-Current and Previous state match, not updating label"
        :
      else
        echo ${2} > ${3}
        echo "[{\"op\": \"add\", \"path\": \"/metadata/labels/${1}\", \"value\": \"${2}\" }]" > /tmp/patch_label.json
        K8S=https://kubernetes.default.svc.cluster.local:$KUBERNETES_SERVICE_PORT
        KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token)
        CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        NAMESPACE=$(</var/run/secrets/kubernetes.io/serviceaccount/namespace)
        if ! curl -sS --output /dev/null --cacert $CACERT --connect-timeout 5 \
            --request PATCH --data "$(cat /tmp/patch_label.json)" \
            -H "Authorization: Bearer $KUBE_TOKEN" -H "Content-Type:application/json-patch+json" \
            $K8S/api/v1/namespaces/$NAMESPACE/pods/$HOSTNAME ; then
          # Fall back to alternative method to update label
          if ! curl -sSk --output /dev/null -H "Authorization: Bearer $KUBE_TOKEN" --request PATCH --data "$(cat /tmp/patch_label.json)" \
            -H "Content-Type:application/json-patch+json" \
            https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$STATEFULSET_NAMESPACE/pods/$HOSTNAME ; then
            echo "`date` ERROR: ${APP}-Unable to update pod label, check access from pod to K8s API or RBAC authorization" >&2
            exit 1
          fi
        fi
      fi
    }
    # note that there are no re-tries here, if check fails the return not ready.
    APP=`basename "$0"`
    state_file=/tmp/activity_state
    if [ ! -f ${state_file} ]; then  # State file not found, creating
      echo "unknown" > ${state_file}
    fi

{{- if .Values.solace.redundancy }}
    # HA config
    IFS='-' read -ra host_array <<< $(hostname)
    node_ordinal=${host_array[-1]}
    password=`cat /mnt/disks/secrets/username_admin_password`

    # For upgrade purposes, ensure redundancy is up only when the pod is started
    redundacycheck_file=/tmp/redundacycheck
    if [ ! -f ${redundacycheck_file} ]; then
      # First check all nodes are online
      results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
              -q "<rpc><show><redundancy><group/></redundancy></show></rpc>" \
              -c "/rpc-reply/rpc/show/redundancy/group-node/status[text() = \"Online\"]"`
      if [[ ${results} != *"<errorInfo></errorInfo>"* ]]; then
        errorinfo=`echo ${results} | xmllint -xpath "string(returnInfo/errorInfo)" -` || errorinfo=
        echo "`date` INFO: ${APP}-Waiting for valid server status response, got ${errorinfo}"
        exit 1
      fi
      nr_node_results=`echo ${results} |  xmllint -xpath "string(returnInfo/countSearchResult)" -`
      if [ "$nr_node_results" -ne "3" ]; then
        echo "`date` INFO: ${APP}-Waiting for all 3 nodes online, got ${nr_node_results}"
        exit 1
      fi
      # Then for each node determine the ip address and check redundancy. Note: id starts here from 1 and not 0.
      for id in 1 2 3; do
        results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
                -q "<rpc><show><redundancy><group/></redundancy></show></rpc>" \
                -v "//ip-address[$id]"`
        node_ip_address=`echo ${results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
        results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://$node_ip_address:8080/SEMP \
                -q "<rpc><show><redundancy/></show></rpc>" \
                -v "/rpc-reply/rpc/show/redundancy/redundancy-status"`
        redundancystatus_results=`echo ${results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
        if [ "${redundancystatus_results}" != "Up" ]; then
          echo "`date` INFO: ${APP}-Redundancy state is not yet up."
          exit 1
        fi
      done
      # Additionally check config-sync status for non-monitoring nodes
      if [ "${node_ordinal}" != "2" ]; then
        results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
                -q "<rpc><show><config-sync></config-sync></show></rpc>" \
                -v "/rpc-reply/rpc/show/config-sync/status/oper-status"`
        confsyncstatus_results=`echo ${results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
        if [ "${confsyncstatus_results}" != "Up" ]; then
          echo "`date` INFO: ${APP}-Config-sync state is not yet up."
          exit 1
        fi
      fi
      # Then for each node check that they report 3 Consul voters.
      for id in 1 2 3; do
        results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
                -q "<rpc><show><redundancy><group/></redundancy></show></rpc>" \
                -v "//ip-address[$id]"`
        node_ip_address=`echo ${results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
        nr_voter_results=`curl --unix-socket /var/run/solace/consul -s http://$node_ip_address:8500/v1/operator/raft/configuration  || echo {} | python -m json.tool | grep Voter | grep true | wc -l`
        if [ $nr_voter_results -ne 3 ]; then
          # For backwards compatibility - will revise.
          nr_voter_results=`curl --unix-socket /var/run/consul -s http://$node_ip_address:8500/v1/operator/raft/configuration  | python -m json.tool | grep Voter | grep true | wc -l`
          if [ $nr_voter_results -ne 3 ]; then
            echo "`date` INFO: ${APP}-Waiting for all 3 Consul voters to be present for node $node_ip_address, got ${nr_voter_results}"
            exit 1
          fi
        fi
      done
      # Creating marker - important that after initial startup pod keeps being ready to serve traffic during failover while redundancy is down
      echo "true" > ${redundacycheck_file}
    fi
    
    if [ "${node_ordinal}" = "2" ]; then
      # For monitor node just check for 3 online nodes in group; active label will always be "false"
      role_results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
              -q "<rpc><show><redundancy><group/></redundancy></show></rpc>" \
              -c "/rpc-reply/rpc/show/redundancy/group-node/status[text() = \"Online\"]"`
      if [[ ${role_results} != *"<errorInfo></errorInfo>"* ]]; then
        errorinfo=`echo ${results} | xmllint -xpath "string(returnInfo/errorInfo)" -` || errorinfo=
        echo "`date` INFO: ${APP}-Waiting for valid server status response, got ${errorinfo}"
        exit 1
      fi
      nodes_online=`echo ${role_results} |  xmllint -xpath "string(returnInfo/countSearchResult)" -`
      if [ "$nodes_online" -eq "3" ]; then
        echo "`date` INFO: ${APP}-Monitor node is redundancy ready"
        exit 0
      else
        echo "`date` INFO: ${APP}-Monitor node is not redundancy ready, ${nodes_online} of 3 nodes online"
        exit 1
      fi
    fi # End Monitor Node

    health_result=`curl -s -o /dev/null -w "%{http_code}"  http://localhost:5550/health-check/guaranteed-active`
    
    case "${health_result}" in
      "200")
        echo "`date` INFO: ${APP}-Message Router is Active and Healthy"
        set_label "active" "true" $state_file
        exit 0
        ;;
      "503")
        set_label "active" "false" $state_file
        echo "`date` INFO: ${APP}-Message Router is Healthy but not Active, further check required"
        ;;
      "")
        echo "`date` WARN: ${APP}-Unable to determine config role, failing readiness check"
        set_label "active" "false" $state_file
        exit 1
    esac
     
    # Checking if Message Router is Standby
    case "${node_ordinal}" in
      "0")
        config_role="primary"
        ;;
      "1")
        config_role="backup"
        ;;
    esac
    online_results=`/mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080/SEMP \
            -q "<rpc><show><redundancy><detail/></redundancy></show></rpc>" \
            -v "/rpc-reply/rpc/show/redundancy/virtual-routers/${config_role}/status/activity[text()]"`
    local_activity=`echo ${online_results} | xmllint -xpath "string(returnInfo/valueSearchResult)" -`
    case "${local_activity}" in
      "Local Active")
        # Redundancy is up and node is locally Active"
        # Set active label to "true"
        set_label "active" "true" $state_file
        # Pass readiness check
        exit 0
        ;;
      "Mate Active")
        # Redundancy is up and node is mate Active"
        # Set active label to "false"
        set_label "active" "false" $state_file
        # Pass readiness check
        exit 0
        ;;
      *)
        echo "`date` WARN: ${APP}-Redundancy not up or not responding, failing readiness check. Local activity state is: ${local_activity}"
        # Set active label to "false"
        set_label "active" "false" $state_file
        # Fail readiness check
        exit 1
        ;;
    esac
{{- else }}
    # nonHA config
    health_result=`curl -s -o /dev/null -w "%{http_code}"  http://localhost:5550/health-check/guaranteed-active`
    
    case "${health_result}" in
      "200")
        echo "`date` INFO: ${APP}-nonHA Message Router is Active and Healthy"
        set_label "active" "true" $state_file
        exit 0
        ;;
      "503")
        echo "`date` INFO: ${APP}-nonHA Message Router message spool is down"
        set_label "active" "false" $state_file
        exit 1
        ;;
      "")
        echo "`date` WARN: ${APP}-Unable to determine config role, failing readiness check"
        set_label "active" "false" $state_file
        exit 1
    esac
{{- end }}

  semp_query.sh: |-
      #!/bin/bash
      APP=`basename "$0"`
      OPTIND=1         # Reset in case getopts has been used previously in the shell.
      # Initialize our own variables:
      count_search=""
      name=""
      password=""
      query=""
      url=""
      value_search=""
      script_name=$0
      verbose=0
      while getopts "c:n:p:q:u:v:" opt; do
          case "$opt" in
          c)  count_search=$OPTARG
              ;;
          n)  name=$OPTARG
              ;;
          p)  password=$OPTARG
              ;;
          q)  query=$OPTARG
              ;;
          u)  url=$OPTARG
              ;;
          v)  value_search=$OPTARG
              ;;        
          esac
      done
      shift $((OPTIND-1))
      [ "$1" = "--" ] && shift
      verbose=1
      #echo "`date` INFO: ${APP}-${script_name}: count_search=${count_search} ,name=${name} ,password=xxx query=${query} \
      #            ,url=${url} ,value_search=${value_search} ,Leftovers: $@" >&2
      if [[ ${url} = "" || ${name} = "" || ${password} = "" || ${query} = "" ]]; then
        echo "`date` ERROR: ${APP}-${script_name}: url, name, password and query are madatory fields" >&2
        echo  '<returnInfo><errorInfo>missing parameter</errorInfo></returnInfo>'
        exit 1
      fi
      if [ `curl --write-out '%{http_code}' --silent --output /dev/null -u ${name}:${password} ${url} -d "<rpc><show><version/></show></rpc>"` != "200" ] ; then
        echo  "<returnInfo><errorInfo>management host is not responding</errorInfo></returnInfo>"
        exit 1
      fi
      query_response=`curl -sS -u ${name}:${password} ${url} -d "${query}"`
      # Validate first char of response is "<", otherwise no hope of being valid xml
      if [[ ${query_response:0:1} != "<" ]] ; then 
        echo  "<returnInfo><errorInfo>no valid xml returned</errorInfo></returnInfo>"
        exit 1
      fi
      query_response_code=`echo $query_response | xmllint -xpath 'string(/rpc-reply/execute-result/@code)' -`

      if [[ -z ${query_response_code} && ${query_response_code} != "ok" ]]; then
          echo  "<returnInfo><errorInfo>query failed -${query_response_code}-</errorInfo></returnInfo>"
          exit 1
      fi
      #echo "`date` INFO: ${APP}-${script_name}: query passed ${query_response_code}" >&2
      if [[ ! -z $value_search ]]; then
          value_result=`echo $query_response | xmllint -xpath "string($value_search)" -`
          echo  "<returnInfo><errorInfo></errorInfo><valueSearchResult>${value_result}</valueSearchResult></returnInfo>"
          exit 0
      fi
      if [[ ! -z $count_search ]]; then
          count_line=`echo $query_response | xmllint -xpath "$count_search" -`
          count_string=`echo $count_search | cut -d '"' -f 2`
          count_result=`echo ${count_line} | tr "><" "\n" | grep -c ${count_string}`
          echo  "<returnInfo><errorInfo></errorInfo><countSearchResult>${count_result}</countSearchResult></returnInfo>"
          exit 0
      fi

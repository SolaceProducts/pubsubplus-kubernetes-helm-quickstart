# Create the StatefulSet needed for redundancy
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "solace.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "solace.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "solace.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ template "solace.fullname" . }}-discovery
  replicas: {{- if .Values.solace.redundancy }} 3 {{- else }} 1 {{- end }}
  podManagementPolicy: Parallel
  updateStrategy: 
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "solace.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
{{- if .Values.image.pullSecretName }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecretName}}
{{- end}}
{{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup | int64 }}
      {{- if and (.Values.securityContext.runAsUser) }}
        runAsUser: {{ .Values.securityContext.runAsUser | int64 }}
      {{- end }}
{{- end }}
      serviceAccountName: {{ template "solace.serviceAccountName" . }}
      terminationGracePeriodSeconds: 1200
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        resources:
          requests:
{{- if eq .Values.solace.size "dev" }}
            cpu: "0.2"
            memory: 0.8Gi
{{- else if eq .Values.solace.size "prod100" }}
            cpu: "2"
            memory: 2.8Gi
{{- else if eq .Values.solace.size "prod1k" }}
            cpu: "2"
            memory: 6.5Gi
{{- else if eq .Values.solace.size "prod10k" }}
            cpu: "4"
            memory: 13.9Gi
{{- else if eq .Values.solace.size "prod100k" }}
            cpu: "8"
            memory: 28.9Gi
{{- else if eq .Values.solace.size "prod200k" }}
            cpu: "12"
            memory: 53.5Gi
{{- end }}
          limits:
{{- if eq .Values.solace.size "dev" }}
            cpu: "1"
            memory: 2Gi
{{- else if eq .Values.solace.size "prod100" }}
            cpu: "2"
            memory: 3Gi
{{- else if eq .Values.solace.size "prod1k" }}
            cpu: "2"
            memory: 7.5Gi
{{- else if eq .Values.solace.size "prod10k" }}
            cpu: "4"
            memory: 15Gi
{{- else if eq .Values.solace.size "prod100k" }}
            cpu: "8"
            memory: 30Gi
{{- else if eq .Values.solace.size "prod200k" }}
            cpu: "12"
            memory: 60Gi
{{- end }}
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 300
          timeoutSeconds: 5
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 5
          exec:
            command:
            - /mnt/disks/solace/readiness_check.sh
        securityContext:
          privileged: false
{{- if semverCompare "<9.4" (default "9.4" (regexFind "\\d+\\.\\d+" .Values.image.tag)) }}
          # need capabilities opened up if PubSub+ version is lower than 9.4
          capabilities:
            add:
              - IPC_LOCK
              - SYS_NICE
{{- end }}
        env:
        - name: STATEFULSET_NAME
          value: {{ template "solace.fullname" . }}
        - name: STATEFULSET_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TZ
          value: {{ printf "%s/%s" ":/usr/share/zoneinfo" (default "UTC" .Values.solace.timezone) }}
        - name: UMASK
          value: "0022"
        command:
         - bash
         - "-ec"
         - |
           source /mnt/disks/solace/init.sh
           # not using postinstall hooks because of order dependencies
           # launch config check - readiness check script will be launched by readinessProbe
           nohup /mnt/disks/solace/config-sync-check.sh &
           /usr/sbin/boot.sh
        lifecycle:
          preStop:
            exec:
              command:
               - bash
               - "-ec"
               - |
                 while ! pgrep solacedaemon ; do sleep 1; done
                 killall solacedaemon; 
                 while [ ! -d /usr/sw/var/db.upgrade ]; do sleep 1; done;
        volumeMounts:
        - name: config-map
          mountPath: /mnt/disks/solace
        - name: secrets
          mountPath: /mnt/disks/secrets
          readOnly: true
        - name: dshm
          mountPath: /dev/shm
        - name: data
          mountPath: /usr/sw/jail
          subPath: jail
        - name: data
          mountPath: /usr/sw/var
          subPath: var
        - name: data
          mountPath: /usr/sw/internalSpool
          subPath: internalSpool
        - name: data
          mountPath: /usr/sw/adb
          subPath: adb
        - name: data
          mountPath: /var/lib/solace/diags
          subPath: diags
        {{- if and (not .Values.storage.slow) (not .Values.storage.nfs) }}
        # only mount when not using slow storage
        - name: data
          mountPath: /usr/sw/internalSpool/softAdb
          subPath: softAdb
        {{- end }}
        ports:
        {{- range $item := .Values.service.ports }}
        - containerPort: {{ $item.containerPort }}
          protocol: {{ $item.protocol }}
        {{- end}}
      volumes:
        - name: config-map
          configMap:
            name: {{ template "solace.fullname" . }}
            defaultMode: 0755
        - name: secrets
          secret:
            secretName: {{ template "solace.fullname" . }}-secrets
            defaultMode: 0400
        - name: dshm
          emptyDir:
            medium: Memory
{{- if and (.Values.storage) (not .Values.storage.persistent) }}
        - name: data
          emptyDir: {}
{{- else if and (.Values.storage) (.Values.storage.customVolumeMount) }}
        - name: data
          {{- with .Values.storage.customVolumeMount }}
{{ tpl . $ | indent 10 }}
          {{- end }}
{{- else }}
  # This is the default way to acquire volume for the data mount
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
  {{- if .Values.storage.useStorageClass }}
      storageClassName: {{ .Values.storage.useStorageClass }}
  {{- end}}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.storage.size}}
{{- end }}
